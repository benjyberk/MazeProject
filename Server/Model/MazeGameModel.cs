using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using MazeLib;
using System.Net.Sockets;
using SearchAlgorithmsLib;

namespace Server
{
    class MazeGameModel : IModel
    {
        private Dictionary<string, SearchableMaze> singlePlayerMazes;
        private Dictionary<string, Solution<Position>> singlePlayerSolutions;
        private BestFirstSearcher<Position> bfs;
        private DepthFirstSearcher<Position> dfs; 

        public MazeGameModel()
        {
            singlePlayerMazes = new Dictionary<string, SearchableMaze>();
            singlePlayerSolutions = new Dictionary<string, Solution<Position>>();
            bfs = new BestFirstSearcher<Position>();
            dfs = new DepthFirstSearcher<Position>();
        }
        /*
         * The generate command creates a single player maze, which is added to the database
         * and then returned to the user
         */
        public SearchableMaze GenerateMaze(string name, int rows, int cols)
        {
            Maze m = new Maze(rows, cols);
            SearchableMaze maze = new SearchableMaze(m, name);
            // The maze is saved in the database
            singlePlayerMazes.Add(name, maze);

            return maze;
        }

        /*
         * The solve-maze command solves a single player maze that already exists in the database
         * If the given maze does not exist, null is returned
         */
        public Solution<Position> SolveMaze(string mazeName, int solutionType)
        {
            Solution<Position> solution;
            // If the maze does not exist, it cannot be solved
            if (!singlePlayerMazes.ContainsKey(mazeName))
            {
                return null;
            }
            // If the maze hasn't already been solved, solve it
            else if (!singlePlayerSolutions.ContainsKey(mazeName))
            {
                ISearcher<Position> searcher;
                // Note: only 0 and 1 are handled here, error checking is done by the 'ICommand'
                if (solutionType == 0)
                {
                    searcher = bfs;
                }
                else
                {
                    searcher = dfs;
                }
                // The solution is generated by the given searcher
                solution = searcher.search(singlePlayerMazes[mazeName]);
            }
            else
            {
                // If the solution already exists in cache, we return it
                solution = singlePlayerSolutions[mazeName];
            }
            return solution;
        }

        public string StartGame(string name, TcpClient user)
        {
            throw new NotImplementedException();
        }
    }
}
